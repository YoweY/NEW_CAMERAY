package com.jamieyao.cameray.Camera.SurfaceView;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.util.AttributeSet;
import android.util.Log;
import android.view.OrientationEventListener;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.Toast;

import com.jamieyao.cameray.Util.*;

import java.io.IOException;
import java.util.List;

/**
 * Created by jamie.yao_cp on 2017/1/4.
 */

public class MySurfaceView extends SurfaceView {

    public final static String TAG="MySurfaceView";

    private Camera mCamera;
    private boolean mIsFrontCamera;
    private int mOrientation=0;

    public MySurfaceView(Context context){
        super(context);
        getHolder().addCallback(callback);//getHolder().addCallback(this);  this class need implements SurfaceHolder.Callback.
        
    }

    public MySurfaceView(Context context, AttributeSet attrs){
        super(context, attrs);
        getHolder().addCallback(callback);//getHolder().addCallback(this);  this class need implements SurfaceHolder.Callback.

    }



    private SurfaceHolder.Callback callback = new SurfaceHolder.Callback() {

        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            Log.i(TAG, "surfaceCreated...");
            try {
                if(mCamera==null){
                    openCamera();
                }
                setCameraParameters();
                mCamera.setPreviewDisplay(getHolder());//?????????
            } catch (Exception e) {
                Toast.makeText(getContext(), "open camera error", Toast.LENGTH_SHORT).show();
                Log.e(TAG,e.getMessage());
            }
            mCamera.startPreview();
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width,
                                   int height) {
            Log.i(TAG, "surfaceChanged...");
            //updateCameraOrientation();
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            Log.i(TAG, "surfaceDestroyed...");
            if (mCamera != null) {
                mCamera.stopPreview();
                mCamera.release();
                mCamera = null;
            }
        }
    };

    private boolean openCamera()
    {
        if(mCamera != null)
        {
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
        if(mIsFrontCamera){
            Camera.CameraInfo cameraInfo=new Camera.CameraInfo();
            for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
                Camera.getCameraInfo(i, cameraInfo);
                if(cameraInfo.facing==Camera.CameraInfo.CAMERA_FACING_FRONT){
                    try {
                        mCamera=Camera.open(i);
                    } catch (Exception e) {
                        mCamera =null;
                        return false;
                    }
                }
            }
        }else {
            try {
                mCamera=Camera.open();
            } catch (Exception e) {
                mCamera =null;
                return false;
            }
        }
        return true;
    }

    //it will be better PictureCallback defined here.
    public void takePicture(Camera.PictureCallback callback){
        mCamera.takePicture(null, null, callback);
    }

    public void switchCamera(){
        mIsFrontCamera = !mIsFrontCamera;
        openCamera();
        if(mCamera!=null){
            setCameraParameters();
            //updateCameraOrientation();
            try {
                mCamera.setPreviewDisplay(getHolder());
                mCamera.startPreview();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }


//*******************************************************************************************
    private void setCameraParameters(){
        Camera.Parameters parameters = mCamera.getParameters();
        // 选择合适的预览尺寸
        List<Camera.Size> sizeList = parameters.getSupportedPreviewSizes();
        if (sizeList.size()>0) {
            Camera.Size cameraSize=sizeList.get(0);
            //预览图片大小
            parameters.setPreviewSize(cameraSize.width, cameraSize.height);
        }

        //设置生成的图片大小
        sizeList = parameters.getSupportedPictureSizes();
        if (sizeList.size()>0) {
            Camera.Size cameraSize=sizeList.get(0);
            for (Camera.Size size : sizeList) {
                //小于100W像素
                if (size.width*size.height<100*10000) {
                    cameraSize=size;
                    break;
                }
            }
            parameters.setPictureSize(cameraSize.width, cameraSize.height);
        }
        //设置图片格式
        parameters.setPictureFormat(ImageFormat.JPEG);
        parameters.setJpegQuality(100);
        parameters.setJpegThumbnailQuality(100);
        //自动聚焦模式
        parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);
        mCamera.setParameters(parameters);
        //设置闪光灯模式。此处主要是用于在相机摧毁后又重建，保持之前的状态
        //setFlashMode(mFlashMode);
        //设置缩放级别
        //setZoom(mZoom);
        //开启屏幕朝向监听
        startOrientationChangeListener();
    }

    /**
     *   启动屏幕朝向改变监听函数 用于在屏幕横竖屏切换时改变保存的图片的方向
     */
    private  void startOrientationChangeListener() {
        OrientationEventListener mOrEventListener = new OrientationEventListener(getContext()) {
            @Override
            public void onOrientationChanged(int rotation) {

                if (((rotation >= 0) && (rotation <= 45)) || (rotation > 315)){
                    rotation=0;
                }else if ((rotation > 45) && (rotation <= 135))  {
                    rotation=90;
                }
                else if ((rotation > 135) && (rotation <= 225)) {
                    rotation=180;
                }
                else if((rotation > 225) && (rotation <= 315)) {
                    rotation=270;
                }else {
                    rotation=0;
                }
                if(rotation==mOrientation)
                    return;
                mOrientation=rotation;
                updateCameraOrientation();
            }
        };
        mOrEventListener.enable();
    }

    /**
     *   根据当前朝向修改保存图片的旋转角度
     */
    private void updateCameraOrientation(){
        if(mCamera!=null){
            Camera.Parameters parameters = mCamera.getParameters();
            //rotation参数为 0、90、180、270。水平方向为0。
            int rotation=90+mOrientation==360?0:90+mOrientation;
            //前置摄像头需要对垂直方向做变换，否则照片是颠倒的
            if(mIsFrontCamera){
                if(rotation==90) rotation=270;
                else if (rotation==270) rotation=90;
            }
            parameters.setRotation(rotation);//生成的图片转90°
            //预览图片旋转90°
            mCamera.setDisplayOrientation(90);//预览转90°
            mCamera.setParameters(parameters);
        }
    }
}
